classdef Layer < definitions.CIFWriter & definitions.materials.Material
    % The Layer class can be used to generate information of a layer in the mask design. The instance
    % of the class should also be used in the creation of geometries in different symbols.
    % To get a valid instance of the Layer class, instantiate a CIFFile class and call the
    % CIFFile.createLayer method.
    properties (SetAccess = private)
        layerId (1, 1) uint32                   % The id of the layer (generated by a CIFFile instance)
        name string                             % The name of the layer (as used by CleWin)
        % material definitions.materials.Material  % The optional material of the layer, uses syntax of CleWin, will be updated later
    end
    
    methods (Static)
        function noLayer = NoLayer()
            % NOLAYER Get a layer that should not be used, but is used as a general placeholder
            noLayer = definitions.Layer(-1, -1, "NOLAYER");
        end
    end
    
    methods
        function obj = Layer(fileHandle, layerId, name)
            % Layer Create an instance of a Layer object that is responsible for managing the information about a layer type in a CIF design.
            % Inputs:
            %   - fileHandle: The file handle to the CIF file
            %   - layerId: The id of the layer (generated by a CIFFile instance)
            %   - name: The name of the layer (as used by CleWin)
            %   - material: The optional material of the layer, uses the Material class to define the style
            arguments
                fileHandle (1, 1) int32                                                                             % The file handle to the CIF file
                layerId (1, 1) uint32                                                                               % The id of the layer (generated by a CIFFile instance)
                name string                                                                                         % The name of the layer (as used by CleWin)
                % material definitions.materials.Material = definitions.materials.Material("Solid", "Solid", 0, 0, 0)  % The optional material of the layer, uses syntax of CleWin, will be updated later
            end
            
            % Construct the superclass
            obj@definitions.CIFWriter(fileHandle);
            obj@definitions.materials.Material("Solid", "Solid", 0, 0, 0);
            
            obj.layerId = layerId;
            obj.name = name;
            % obj.material = material;
        end
        
        function obj = printFile(obj)
            % line = sprintf("L L%i; (CleWin: %i %s/%s);", obj.layerId, obj.layerId, obj.name, obj.material.toString());
            line = sprintf("L L%i; (CleWin: %i %s/%s);", obj.layerId, obj.layerId, obj.name, obj.getMaterialString());
            
            obj.write(line);
        end
        
        function obj = printLayer(obj)
            % PRINTLAYER Print the layer in a symbol
            line = sprintf("L L%i;", obj.layerId);
            
            obj.write(line);
        end
        
        function iseq = eq(obj, layer)
            arguments
                obj definitions.Layer
                layer definitions.Layer
            end
            
            iseq = obj.layerId == layer.layerId && strcmp(obj.name, layer.name);
        end
        
        function isneq = neq(obj, layer)
            arguments
                obj definitions.Layer
                layer definitions.Layer
            end
            
            isneq = ~obj.eq(obj, layer);
        end
    end
end
